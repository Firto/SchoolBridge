// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolBridge.DataAccess;

namespace SchoolBridge.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20200623090320_add PupilSubject")]
    partial class addPupilSubject
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SchoolBridge.DataAccess.Entities.Authorization.ActiveRefreshToken<SchoolBridge.DataAccess.Entities.User>", b =>
                {
                    b.Property<string>("Jti")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Expire")
                        .HasColumnType("datetime2");

                    b.Property<string>("UUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Jti");

                    b.HasIndex("UserId");

                    b.ToTable("ActiveRefreshTokens");
                });

            modelBuilder.Entity("SchoolBridge.DataAccess.Entities.DefaultRolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("DefaultRolePermissions");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            PermissionId = 5
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 6
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 7
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 10
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 11
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 12
                        });
                });

            modelBuilder.Entity("SchoolBridge.DataAccess.Entities.Files.File", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Files");

                    b.HasData(
                        new
                        {
                            Id = "default-user-photo"
                        });
                });

            modelBuilder.Entity("SchoolBridge.DataAccess.Entities.Files.Images.Image", b =>
                {
                    b.Property<string>("FileId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Static")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FileId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            FileId = "default-user-photo",
                            Static = true,
                            Type = "image/jpeg"
                        });
                });

            modelBuilder.Entity("SchoolBridge.DataAccess.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AbbName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AbbName = "en",
                            FullName = "English"
                        },
                        new
                        {
                            Id = 2,
                            AbbName = "ua",
                            FullName = "Українська"
                        });
                });

            modelBuilder.Entity("SchoolBridge.DataAccess.Entities.LanguageString", b =>
                {
                    b.Property<int>("IdId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("String")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("LanguageStrings");
                });

            modelBuilder.Entity("SchoolBridge.DataAccess.Entities.LanguageStringId", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LanguageStringIds");
                });

            modelBuilder.Entity("SchoolBridge.DataAccess.Entities.LanguageStringIdType", b =>
                {
                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("StringIdId")
                        .HasColumnType("int");

                    b.HasKey("TypeId", "StringIdId");

                    b.HasIndex("StringIdId");

                    b.ToTable("LanguageStringIdTypes");
                });

            modelBuilder.Entity("SchoolBridge.DataAccess.Entities.LanguageStringType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LanguageStringTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "client-error"
                        },
                        new
                        {
                            Id = 2,
                            Name = "component"
                        },
                        new
                        {
                            Id = 3,
                            Name = "valid-error"
                        },
                        new
                        {
                            Id = 4,
                            Name = "default"
                        });
                });

            modelBuilder.Entity("SchoolBridge.DataAccess.Entities.Notification<SchoolBridge.DataAccess.Entities.User>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Base64Sourse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SchoolBridge.DataAccess.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CreateAdmin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "EditAdmin"
                        },
                        new
                        {
                            Id = 3,
                            Name = "EditAdminPermissions"
                        },
                        new
                        {
                            Id = 4,
                            Name = "RemoveAdmin"
                        },
                        new
                        {
                            Id = 5,
                            Name = "CreatePupil"
                        },
                        new
                        {
                            Id = 6,
                            Name = "EditPupilPermissions"
                        },
                        new
                        {
                            Id = 7,
                            Name = "EditPupil"
                        },
                        new
                        {
                            Id = 8,
                            Name = "RemovePupil"
                        },
                        new
                        {
                            Id = 9,
                            Name = "CreateLanguage"
                        },
                        new
                        {
                            Id = 10,
                            Name = "GetLanguage"
                        },
                        new
                        {
                            Id = 11,
                            Name = "EditLanguage"
                        },
                        new
                        {
                            Id = 12,
                            Name = "RemoveLanguage"
                        },
                        new
                        {
                            Id = 13,
                            Name = "CreateLanguageStringId"
                        },
                        new
                        {
                            Id = 14,
                            Name = "GetLanguageStringId"
                        },
                        new
                        {
                            Id = 15,
                            Name = "EditLanguageStringId"
                        },
                        new
                        {
                            Id = 16,
                            Name = "RemoveLanguageStringId"
                        },
                        new
                        {
                            Id = 17,
                            Name = "CreateLanguageStringIdType"
                        },
                        new
                        {
                            Id = 18,
                            Name = "GetLanguageStringIdType"
                        },
                        new
                        {
                            Id = 19,
                            Name = "EditLanguageStringIdType"
                        },
                        new
                        {
                            Id = 20,
                            Name = "RemoveLanguageStringIdType"
                        },
                        new
                        {
                            Id = 21,
                            Name = "CreateLanguageString"
                        },
                        new
                        {
                            Id = 22,
                            Name = "GetLanguageString"
                        },
                        new
                        {
                            Id = 23,
                            Name = "EditLanguageString"
                        },
                        new
                        {
                            Id = 24,
                            Name = "RemoveLanguageString"
                        },
                        new
                        {
                            Id = 25,
                            Name = "AddLanguageStringType"
                        },
                        new
                        {
                            Id = 26,
                            Name = "GetLanguageStringType"
                        },
                        new
                        {
                            Id = 27,
                            Name = "EditLanguageStringType"
                        },
                        new
                        {
                            Id = 28,
                            Name = "RemoveLanguageStringType"
                        },
                        new
                        {
                            Id = 29,
                            Name = "GetAdminsList"
                        },
                        new
                        {
                            Id = 30,
                            Name = "GetAdminInfo"
                        },
                        new
                        {
                            Id = 31,
                            Name = "GetPupilsList"
                        },
                        new
                        {
                            Id = 32,
                            Name = "GetPupilsInfo"
                        },
                        new
                        {
                            Id = 33,
                            Name = "UpdateBaseUpdateId"
                        },
                        new
                        {
                            Id = 34,
                            Name = "GetAdminPanel"
                        },
                        new
                        {
                            Id = 35,
                            Name = "GetGlobalizationTab"
                        });
                });

            modelBuilder.Entity("SchoolBridge.DataAccess.Entities.PupilSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("DayNumber")
                        .HasColumnType("tinyint");

                    b.Property<byte>("LessonNumber")
                        .HasColumnType("tinyint");

                    b.Property<string>("PupilId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PupilId");

                    b.ToTable("PupilSubjects");
                });

            modelBuilder.Entity("SchoolBridge.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Pupil"
                        });
                });

            modelBuilder.Entity("SchoolBridge.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Banned")
                        .HasColumnType("nvarchar(210)")
                        .HasMaxLength(210);

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(210)")
                        .HasMaxLength(210);

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(210)")
                        .HasMaxLength(210);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(210)")
                        .HasMaxLength(210);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(210)")
                        .HasMaxLength(210);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(210)")
                        .HasMaxLength(210);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "admin",
                            Birthday = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@admin.admin",
                            Lastname = "Admin",
                            Login = "admin",
                            Name = "Admin",
                            PasswordHash = "AD9BEAI6VUZZY+97854EDA8195339B99ED859139B03A5B8CC2DFFAC1D3DE41C88315A8887900B2562E7DF3F793378456BBAFA5786D",
                            RoleId = 1,
                            Surname = "Admin"
                        });
                });

            modelBuilder.Entity("SchoolBridge.DataAccess.Entities.UserPermission", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("UserPermissions");

                    b.HasData(
                        new
                        {
                            UserId = "admin",
                            PermissionId = 1
                        },
                        new
                        {
                            UserId = "admin",
                            PermissionId = 2
                        },
                        new
                        {
                            UserId = "admin",
                            PermissionId = 3
                        },
                        new
                        {
                            UserId = "admin",
                            PermissionId = 4
                        },
                        new
                        {
                            UserId = "admin",
                            PermissionId = 5
                        },
                        new
                        {
                            UserId = "admin",
                            PermissionId = 6
                        },
                        new
                        {
                            UserId = "admin",
                            PermissionId = 7
                        },
                        new
                        {
                            UserId = "admin",
                            PermissionId = 10
                        },
                        new
                        {
                            UserId = "admin",
                            PermissionId = 11
                        },
                        new
                        {
                            UserId = "admin",
                            PermissionId = 12
                        },
                        new
                        {
                            UserId = "admin",
                            PermissionId = 13
                        },
                        new
                        {
                            UserId = "admin",
                            PermissionId = 14
                        },
                        new
                        {
                            UserId = "admin",
                            PermissionId = 15
                        },
                        new
                        {
                            UserId = "admin",
                            PermissionId = 16
                        },
                        new
                        {
                            UserId = "admin",
                            PermissionId = 17
                        },
                        new
                        {
                            UserId = "admin",
                            PermissionId = 18
                        },
                        new
                        {
                            UserId = "admin",
                            PermissionId = 19
                        },
                        new
                        {
                            UserId = "admin",
                            PermissionId = 20
                        },
                        new
                        {
                            UserId = "admin",
                            PermissionId = 21
                        },
                        new
                        {
                            UserId = "admin",
                            PermissionId = 22
                        },
                        new
                        {
                            UserId = "admin",
                            PermissionId = 23
                        },
                        new
                        {
                            UserId = "admin",
                            PermissionId = 24
                        },
                        new
                        {
                            UserId = "admin",
                            PermissionId = 25
                        },
                        new
                        {
                            UserId = "admin",
                            PermissionId = 26
                        },
                        new
                        {
                            UserId = "admin",
                            PermissionId = 27
                        },
                        new
                        {
                            UserId = "admin",
                            PermissionId = 28
                        },
                        new
                        {
                            UserId = "admin",
                            PermissionId = 29
                        },
                        new
                        {
                            UserId = "admin",
                            PermissionId = 30
                        },
                        new
                        {
                            UserId = "admin",
                            PermissionId = 31
                        },
                        new
                        {
                            UserId = "admin",
                            PermissionId = 32
                        },
                        new
                        {
                            UserId = "admin",
                            PermissionId = 33
                        },
                        new
                        {
                            UserId = "admin",
                            PermissionId = 34
                        },
                        new
                        {
                            UserId = "admin",
                            PermissionId = 35
                        });
                });

            modelBuilder.Entity("SchoolBridge.DataAccess.Entities.Authorization.ActiveRefreshToken<SchoolBridge.DataAccess.Entities.User>", b =>
                {
                    b.HasOne("SchoolBridge.DataAccess.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SchoolBridge.DataAccess.Entities.DefaultRolePermission", b =>
                {
                    b.HasOne("SchoolBridge.DataAccess.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolBridge.DataAccess.Entities.Role", "Role")
                        .WithMany("DefaultPermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolBridge.DataAccess.Entities.Files.Images.Image", b =>
                {
                    b.HasOne("SchoolBridge.DataAccess.Entities.Files.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolBridge.DataAccess.Entities.LanguageString", b =>
                {
                    b.HasOne("SchoolBridge.DataAccess.Entities.LanguageStringId", "Id")
                        .WithMany()
                        .HasForeignKey("IdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolBridge.DataAccess.Entities.Language", "Language")
                        .WithMany("Strings")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolBridge.DataAccess.Entities.LanguageStringIdType", b =>
                {
                    b.HasOne("SchoolBridge.DataAccess.Entities.LanguageStringId", "StringId")
                        .WithMany("Types")
                        .HasForeignKey("StringIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolBridge.DataAccess.Entities.LanguageStringType", "Type")
                        .WithMany("Strings")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolBridge.DataAccess.Entities.Notification<SchoolBridge.DataAccess.Entities.User>", b =>
                {
                    b.HasOne("SchoolBridge.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SchoolBridge.DataAccess.Entities.PupilSubject", b =>
                {
                    b.HasOne("SchoolBridge.DataAccess.Entities.User", "Pupil")
                        .WithMany()
                        .HasForeignKey("PupilId");
                });

            modelBuilder.Entity("SchoolBridge.DataAccess.Entities.User", b =>
                {
                    b.HasOne("SchoolBridge.DataAccess.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolBridge.DataAccess.Entities.UserPermission", b =>
                {
                    b.HasOne("SchoolBridge.DataAccess.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolBridge.DataAccess.Entities.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
